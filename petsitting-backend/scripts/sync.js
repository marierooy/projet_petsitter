require('dotenv').config();
const bcrypt = require('bcrypt');
const { sequelize, User, Role, AnimalType, Service, Occurence, CareMode } = require('../models');

async function syncDatabase() {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie.');

    // await sequelize.sync({ force: true });
    await sequelize.sync({ alter: true });
    console.log('‚úÖ Base de donn√©es synchronis√©e.');

    // Initialiser les r√¥les s'ils n'existent pas
    const count = await Role.count();
    if (count === 0) {
      await Role.bulkCreate([
        { name: 'petsitter' },
        { name: 'owner' },
        { name: 'admin' }
      ]);
      console.log('‚úÖ R√¥les ins√©r√©s.');
    }

    // V√©rifier si l'utilisateur admin existe
    let adminUser = await User.findOne({ where: { email: 'rooy.marie@gmail.com' } });
    if (!adminUser) {
      const hashedPassword = await bcrypt.hash('Mitchoune-28', 10);
      adminUser = await User.create({
        first_name: 'Admin',
        last_name: 'User',
        email: 'rooy.marie@gmail.com',
        password: hashedPassword,
      });
      console.log('‚úÖ Utilisateur admin cr√©√©.');
      // Associer l'utilisateur au r√¥le admin
      const adminRole = await Role.findOne({ where: { name: 'admin' } });
      await adminUser.addRole(adminRole); // m√©thode g√©n√©r√©e automatiquement par Sequelize
      const petsitterRole = await Role.findOne({ where: { name: 'petsitter' } });
      await adminUser.addRole(petsitterRole); // m√©thode g√©n√©r√©e automatiquement par Sequelize
      console.log('‚úÖ R√¥le admin et petsitter assign√© √† rooy.marie@gmail.com');
    }

    // 4. Ins√©rer les types d'animaux
    const countAnimalTypes = await AnimalType.count();
    if (countAnimalTypes === 0) {
      const animalTypes = [
        'Petit chien (<9 kg)',
        'Chien de 10 √† 20 kg',
        'Chien de 20 √† 40kg',
        'Chien >40kg',
        'Chat',
        'Furet',
        'Oiseau',
        'Reptile',
        'Poisson',
        'Tortue',
        'Poule'
      ];

      await AnimalType.bulkCreate(animalTypes.map(name => ({ name })));
      console.log('‚úÖ Types d\'animaux ins√©r√©s.');
    } else {
      console.log('Types d\'animaux d√©j√† ins√©r√©s.');
    }
    // 4. Ins√©rer les services
    const countServices = await Service.count();
    if (countServices === 0) {
      const services = [
        { label: 'Promenade', basic_service: true },
        { label: 'Donner √† manger / √† boire', basic_service: true },
        { label: 'Changer la liti√®re', basic_service: true },
        { label: 'Nettoyer la cage', basic_service: true },
        { label: "Changer l'eau du bocal", basic_service: true },
        { label: 'Acheter √† manger', basic_service: false },
        { label: 'Acheter de la liti√®re', basic_service: false },
        { label: 'Toilettage', basic_service: false },
        { label: 'Consultation v√©t√©rinaire', basic_service: false },
        { label: 'Soigner une blessure', basic_service: false },
        { label: 'Donner des m√©dicaments', basic_service: false },
        { label: 'Appliquer une piqure', basic_service: false },
      ];
      await Service.bulkCreate(services);
      console.log('‚úÖ Services ins√©r√©s.');
    } else {
      console.log('Services d√©j√† ins√©r√©s.');
    }

        // 4. Ins√©rer les services
    const countOccurences = await Occurence.count();
    if (countOccurences === 0) {
      const Occurences = [
        '1 fois',
        '2 fois',
        '3 fois',
        '1 fois par jour',
        '2 fois par jour',
        '3 fois par jour',
        '1 fois par semaine',
        '2 fois par semaine',
        '3 fois par semaine'
      ];
      await Occurence.bulkCreate(Occurences.map(label => ({ label })));
      console.log('‚úÖ Occurences ins√©r√©es.');
    } else {
      console.log('Occurences d√©j√† ins√©r√©es.');
    }
        // 5. Ins√©rer les careModes
    const countCareModes = await CareMode.count();
    if (countCareModes === 0) {
      const careModes = [
        { label: 'sitter' },
        { label: 'home' },
      ];
      await CareMode.bulkCreate(careModes);
      console.log('‚úÖ Services ins√©r√©s.');
    } else {
      console.log('Services d√©j√† ins√©r√©s.');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la synchronisation :', error);
  } finally {
    await sequelize.close();
    console.log('üîí Connexion ferm√©e.');
  }
}

syncDatabase();